/* eslint-env commonjs */

/*
eslint
max-lines: off,
no-magic-numbers: off,
*/

module.exports = {
    parser: 'babel-eslint',
    parserOptions: {
        codeFrame: false,
        ecmaFeature: {
            impliedStrict: true,
            jsx: true,
        },
        ecmaVersion: 9,
        sourceType: 'module',
    },
    env: {
        es6: true,
        browser: true,
        node: true,
    },
    extends: ['eslint:all'],
    plugins: ['array-func', 'babel', 'eslint-comments', 'filenames', 'flowtype', 'flowtype-errors', 'fp', 'prettier', 'promise', 'ramda', 'react'],
    rules: {
        // region Covered by prettier
        'array-bracket-newline': 'off',
        'array-bracket-spacing': 'off',
        'array-element-newline': 'off',
        'arrow-parens': 'off',
        'arrow-spacing': 'off',
        'block-spacing': 'off',
        'brace-style': 'off',
        'comma-dangle': 'off',
        'comma-spacing': 'off',
        'comma-style': 'off',
        'computed-property-spacing': 'off',
        'dot-location': 'off',
        'eol-last': 'off',
        'func-call-spacing': 'off',
        'function-paren-newline': 'off',
        'generator-star-spacing': 'off',
        'implicit-arrow-linebreak': 'off',
        indent: 'off',
        'jsx-quotes': 'off',
        'key-spacing': 'off',
        'keyword-spacing': 'off',
        'lines-around-comment': 'off',
        'max-len': 'off',
        'multiline-ternary': 'off',
        'newline-per-chained-call': 'off',
        'new-parens': 'off',
        'no-extra-parens': 'off',
        'no-extra-semi': 'off',
        'no-floating-decimal': 'off',
        'no-mixed-operators': 'off',
        'no-mixed-spaces-and-tabs': 'off',
        'no-multiple-empty-lines': 'off',
        'no-multi-spaces': 'off',
        'no-tabs': 'off',
        'no-trailing-spaces': 'off',
        'no-unexpected-multiline': 'off',
        'no-whitespace-before-property': 'off',
        'nonblock-statement-body-position': 'off',
        'object-curly-newline': 'off',
        'object-curly-spacing': 'off',
        'object-property-newline': 'off',
        'one-var-declaration-per-line': 'off',
        'operator-linebreak': 'off',
        'padded-blocks': 'off',
        'quote-props': 'off',
        quotes: 'off',
        'rest-spread-spacing': 'off',
        semi: 'off',
        'semi-spacing': 'off',
        'semi-style': 'off',
        'space-before-blocks': 'off',
        'space-before-function-paren': 'off',
        'space-infix-ops': 'off',
        'space-in-parens': 'off',
        'space-unary-ops': 'off',
        'switch-colon-spacing': 'off',
        'template-curly-spacing': 'off',
        'template-tag-spacing': 'off',
        'unicode-bom': 'off',
        'wrap-iife': 'off',
        'wrap-regex': 'off',
        'yield-star-spacing': 'off',

        'babel/object-curly-spacing': 'off',
        'babel/semi': 'off',
        // endregion

        // region Covered by Flow
        'no-undef': 'off',
        'no-use-before-define': 'off',
        // endregion Covered by Flow

        // region Covered by fp
        'no-plusplus': 'off',
        'no-undefined': 'off',
        // endregion

        // region Covered by import
        'no-duplicate-imports': 'off',
        // endregion

        // region Covered by babel
        'no-invalid-this': 'off',
        'new-cap': 'off',
        // endregion

        // region Configured
        'capitalized-comments': 'off',
        'default-case': 'off',
        'dot-notation': ['error', { allowKeywords: true }],
        'func-names': 'off',
        'func-style': 'off',
        'id-blacklist': 'off',
        'id-length': 'off',
        'id-match': 'off',
        'line-comment-position': 'off',
        'lines-between-class-members': 'off',
        'max-lines': ['error', 400],
        'max-nested-callbacks': ['error', 3],
        'max-params': ['error', 10],
        'max-statements': ['error', 20],
        'max-statements-per-line': ['error', { max: 1 }],
        'multiline-comment-style': 'off',
        'no-bitwise': 'off',
        'no-confusing-arrow': 'off',
        'no-else-return': 'off',
        'no-inline-comments': 'off',
        'no-irregular-whitespace': 'off',
        'no-magic-numbers': ['error', { ignore: [-1, 0, 1] }],
        'no-negated-condition': 'off',
        'no-nested-ternary': 'off',
        'no-process-env': 'off',
        'no-process-exit': 'off',
        'no-redeclare': 'off',
        'no-restricted-imports': 'off',
        'no-restricted-modules': 'off',
        'no-restricted-properties': 'off',
        'no-restricted-syntax': 'off',
        'no-shadow': 'off',
        'no-template-curly-in-string': 'off',
        'no-ternary': 'off',
        'no-underscore-dangle': 'off',
        'no-unused-expressions': 'off',
        'no-warning-comments': 'off',
        'one-var': ['error', 'never'],
        'operator-assignment': ['error', 'never'],
        'padding-line-between-statements': [
            'error',
            {
                blankLine: 'always',
                next: 'block-like',
                prev: '*',
            },
            {
                blankLine: 'always',
                next: '*',
                prev: 'block-like',
            },
            {
                blankLine: 'always',
                next: 'class',
                prev: '*',
            },
            {
                blankLine: 'always',
                next: '*',
                prev: 'class',
            },
            {
                blankLine: 'always',
                next: 'function',
                prev: '*',
            },
            {
                blankLine: 'always',
                next: '*',
                prev: 'function',
            },
            {
                blankLine: 'always',
                next: 'return',
                prev: '*',
            },
            {
                blankLine: 'always',
                next: 'throw',
                prev: '*',
            },
            {
                blankLine: 'always',
                next: '*',
                prev: 'directive',
            },
            {
                blankLine: 'always',
                next: 'const',
                prev: 'expression',
            },
            {
                blankLine: 'always',
                next: 'expression',
                prev: 'const',
            },
            {
                blankLine: 'always',
                next: 'let',
                prev: 'expression',
            },
            {
                blankLine: 'always',
                next: 'expression',
                prev: 'let',
            },
            {
                blankLine: 'always',
                next: 'const',
                prev: 'let',
            },
            {
                blankLine: 'always',
                next: 'let',
                prev: 'const',
            },
            {
                blankLine: 'always',
                next: 'let',
                prev: 'const',
            },
            {
                blankLine: 'always',
                next: 'const',
                prev: 'let',
            },
        ],
        radix: ['error', 'as-needed'],
        'require-await': 'off',
        'require-jsdoc': 'off',
        'sort-imports': 'off',
        'sort-keys': 'off',
        'valid-jsdoc': 'off',
        yoda: ['error', 'never'],
        // endregion

        // region Plugins
        'array-func/from-map': 'error',
        'array-func/no-unnecessary-this-arg': 'error',

        'babel/no-invalid-this': 'error',

        'eslint-comments/disable-enable-pair': 'error',
        'eslint-comments/no-aggregating-enable': 'error',
        'eslint-comments/no-duplicate-disable': 'error',
        'eslint-comments/no-unlimited-disable': 'error',
        'eslint-comments/no-unused-disable': 'error',
        'eslint-comments/no-unused-enable': 'error',

        'filenames/match-exported': ['error', ['kebab', 'camel', 'pascal']],
        'filenames/match-regex': ['error', '^_?[A-Za-z.]+|\\$[\\w.]+|__|_$', true],

        'flowtype/boolean-style': 'error',
        'flowtype/define-flow-type': 'error',
        'flowtype/no-dupe-keys': 'error',
        'flowtype/no-primitive-constructor-types': 'error',
        'flowtype/no-types-missing-file-annotation': 'error',
        'flowtype/require-valid-file-annotation': 'error',
        'flowtype/use-flow-type': 'error',
        'flowtype/no-unused-expressions': 'error',

        // 'flowtype-errors/show-errors': 'error',

        'fp/no-arguments': 'error',
        'fp/no-delete': 'error',
        'fp/no-events': 'error',
        'fp/no-mutating-assign': 'error',
        'fp/no-valueof-field': 'error',

        'promise/catch-or-return': 'error',
        'promise/no-callback-in-promise': 'error',
        'promise/no-nesting': 'error',
        'promise/no-promise-in-callback': 'error',
        'promise/no-return-in-finally': 'error',
        'promise/no-return-wrap': 'error',
        'promise/param-names': 'error',
        'promise/prefer-await-to-callbacks': 'error',

        'ramda/always-simplification': 'error',
        'ramda/any-pass-simplification': 'error',
        'ramda/both-simplification': 'error',
        'ramda/complement-simplification': 'error',
        'ramda/cond-simplification': 'error',
        'ramda/either-simplification': 'error',
        'ramda/eq-by-simplification': 'error',
        'ramda/filter-simplification': 'error',
        'ramda/if-else-simplification': 'error',
        'ramda/map-simplification': 'error',
        'ramda/merge-simplification': 'error',
        'ramda/no-redundant-and': 'error',
        'ramda/no-redundant-not': 'error',
        'ramda/no-redundant-or': 'error',
        'ramda/pipe-simplification': 'error',
        'ramda/prop-satisfies-simplification': 'error',
        'ramda/reduce-simplification': 'error',
        'ramda/reject-simplification': 'error',
        'ramda/set-simplification': 'error',
        'ramda/unless-simplification': 'error',
        'ramda/when-simplification': 'error',

        'react/no-danger-with-children': 'error',
        'react/jsx-no-target-blank': 'error',
        'react/jsx-uses-react': 'error',
        'react/jsx-uses-vars': 'error',
        'react/no-array-index-key': 'error',
        'react/no-danger': 'error',
        'react/no-deprecated': 'error',
        'react/no-did-mount-set-state': 'error',
        'react/no-did-update-set-state': 'error',
        'react/no-find-dom-node': 'error',
        'react/no-is-mounted': 'error',
        'react/no-render-return-value': 'error',
        'react/no-string-refs': 'error',
        'react/no-will-update-set-state': 'error',
        'react/require-optimization': 'error',
        'react/void-dom-elements-no-children': 'error',
        'react/button-has-type': 'error',
        'react/jsx-key': 'error',
        'react/jsx-no-comment-textnodes': 'error',
        'react/jsx-no-duplicate-props': 'error',
        'react/jsx-no-undef': 'error',
        'react/no-access-state-in-setstate': 'error',
        'react/no-direct-mutation-state': 'error',
        'react/no-redundant-should-component-update': 'error',
        'react/no-unescaped-entities': 'error',
        'react/no-unknown-property': 'error',
        'react/react-in-jsx-scope': 'error',
        'react/require-render-return': 'error',
        'react/boolean-prop-naming': 'error',
        'react/jsx-boolean-value': ['error', 'never'],
        'react/jsx-handler-names': 'error',
        'react/jsx-no-literals': 'error',
        'react/jsx-pascal-case': 'error',
        'react/no-multi-comp': 'error',
        'react/no-typos': 'error',
        'react/prefer-stateless-function': 'error',
        'react/self-closing-comp': 'error',
        'react/sort-comp': 'error',
        // endregion

        'prettier/prettier': [
            'error',
            {
                bracketSpacing: true,
                jsxBracketSameLine: false,
                printWidth: 160,
                semi: true,
                singleQuote: true,
                tabWidth: 4,
                trailingComma: 'all',
                useTabs: false,
            },
        ],
    },
};
